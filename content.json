{"posts":[{"title":"socket通讯插件-jailBot","text":"阿里GIT开源webControllerhttps://code.aliyun.com/admin1234566/jailbot.git //私聊处理 public function stringMsg(){ $_img='http://www.mxact.com/static/img//logo2.png'; $this-&gt;sendMsg('你好啊'); $this-&gt;sendImg($_img); //发送图片 $this-&gt;sendRecord('http://b.mxact.com/api.mp3'); //发送mp3语音 $this-&gt;sendCardShare('272745091'); //分享名片 $this-&gt;sendLocation('28.00','120.70','我在这里','点击看看啊 啊啊啊'); //分享坐标 $this-&gt;sendUrlCard('http://www.baidu.com',$_img,'分享链接','有好东西');//分享卡片 $this-&gt;sendShake();//抖屏 } //群聊处理 public function stringMsg() { $_img='http://www.mxact.com/static/img//logo2.png'; $this-&gt;recall(); //撤回该发言人这个消息 $this-&gt;ban(2); //禁言该发言人2分钟 $this-&gt;unban(); //解除该发言人禁言 $this-&gt;sendMsg('你好');//回复该发言人消息 $this-&gt;reply('你好'); //at并且该发言人回复 $this-&gt;kick();//踢出群 $this-&gt;kickForEvery();//该发言人永久踢出群 $this-&gt;sendImg($_img); //发送图片 $this-&gt;sendRecord('http://b.mxact.com/api.mp3'); //发送mp3语音 $this-&gt;sendCardShare('272745091'); //分享名片 $this-&gt;sendLocation('28.00','120.70','我在这里','点击看看啊 啊啊啊'); //分享坐标 $this-&gt;sendUrlCard('http://www.baidu.com',$_img,'分享链接','有好东西');//分享卡片 $this-&gt;sendSign();//签到QQ群 $this-&gt;setGroupSpecialTitle('设置头衔');//设置该发言人头衔，仅仅机器人群主使用 $this-&gt;setGroupCard('设置名片');//设置该发言人的名片 $this-&gt;setAllBanSpeak();//全体禁言 $this-&gt;setUnAllBanSpeak(); //解除全体禁言 $this-&gt;setAdmin(); //设置改发言用户管理员。仅仅机器人为群主可用 $this-&gt;setUnAdmin();//取消改发言用户管理员。仅仅机器人为群主可用 } ## 其他处理 FriendAddRequest=&gt;好友添加请求处理 GroupAddRequest=&gt;群他人申请/被邀请处理 GroupMemberDecrease=&gt;群成员离开/被踢处理 GroupMemberIncrease=&gt;群成员加入/被管理员邀请处理 GroupUpload=&gt;群成员上传文件处理 感谢朋友的底层技术支持: 开发板 包含增强【撤回消息，发送语音，发送文件，发送图片，发送xml】socketEventpp.cpk 被动事件推送 图片数据好友已添加(FriendAdd)好友添加请求(FriendAddRequest)群添加请求(GroupAddRequest)群禁言事件(GroupBan)点击菜单事件(ClickMenu)私聊消息(PrivateMsg)群消息(GroupMsg)收到匿名消息讨论组消息(DiscussMsg)群文件上传(GroupUpload)群管理员变动(GroupAdminChange)群成员减少(GroupMemberDecrease)群成员增加(GroupMemberIncrease) 主动推送动作 setGroupFileDelete「删除群文件」sendDiscussMsg「发送讨论组消息」sendFlower「送花」sendGroupMsg「发送群消息」sendLike「发送名片赞」sendPrivateMsg「发送私聊消息」setDiscussLeave「置讨论组退出」setFriendAddRequest「置好友添加请求」setGroupAddRequest「置群添加请求」setGroupAdmin「置群管理员」setGroupAnonymous「置群匿名设置」setGroupAnonymousBan「置匿名群员禁言」setGroupBan「置群成员禁言」setGroupCard「置群成员名片」setGroupFileDelete「删除群文件」setGroupLeave「置群退出」setGroupKick「置群成员移除」setGroupSign「置群签到」setGroupSpecialTitle「置群成员专属头衔」setGroupWholeBan「置全群禁言」setMsgDelete「撤回消息」setSign「QQ打卡」setStatus「置悬浮窗数据」CCQ码动作 &lt;?php /** * Created by PhpStorm. * User: admin * Date: 2020/4/13 * Time: 18:05 */ namespace app\\index\\service; class cqCodeBuilder { /** * 说明 * 此class只用于获取特定CQ码，并没有真正的调用API！！！ */ /** * @某人(at) * @param number $qq 要艾特的QQ号，-1 为全体 * @param bool $needSpace At后不加空格，默认为 True，可使At更规范美观。如果不需要添加空格，请置本参数为 False。 * @return string CQ码_At */ public function cqAt($qq, $needSpace = true) { if($qq == -1) $qq = 'all'; return $needSpace ? &quot;[CQ:at,qq=$qq] &quot; : &quot;[CQ:at,qq=$qq]&quot;; } /** * 禁言 * 只能在群消息中使用， * @param int $qq 禁言操作，-1为全体 * @param int $time 禁言时间，0为解除禁言 * @return string CQ码_At */ public function cqBan($qq = -1, $time = 0) { return &quot;[CQ:ban,qq=$qq,time=$time]&quot;; } /** * 发送emoji表情(emoji) * @param int $id 表情ID，emoji的unicode编号 * @return string CQ码_emoji */ public function cqEmoji($id) { return &quot;[CQ:emoji,id=$id]&quot;; } /** * 发送表情(face) * @param int $id 表情ID，0 ~ 200+ * @return string CQ码_表情 */ public function cqFace($id) { return &quot;[CQ:face,id=$id]&quot;; } /** * 发送窗口抖动(shake) - 仅支持好友，腾讯已将其改名为戳一戳 * @return string CQ码_窗口抖动 */ public function cqShake() { return '[CQ:shake]'; } /** * 反转义 * @param string $msg 原消息，要反转义的字符串 * @return string 反转义后的字符串 */ public function antiEscape($msg) { $msg = str_replace('&amp;#91;', '[', $msg); $msg = str_replace('&amp;#93;', ']', $msg); $msg = str_replace('&amp;#44;', ',', $msg); $msg = str_replace('&amp;amp;', '&amp;', $msg); return $msg; } /** * 发送链接分享(share) * @param string $url 分享链接，点击卡片后跳转的网页地址 * @param string $title 标题，可空，分享的标题，建议12字以内 * @param string $content 内容，可空，分享的简介，建议30字以内 * @param string $picUrl 图片链接，可空，分享的图片链接，留空则为默认图片 * @return string CQ码_链接分享 */ public function cqShare($url, $title = '', $content = '', $picUrl = '') //发送链接分享 { $msg = '[CQ:share,url='.$this-&gt;escape($url, true); if($title) $msg .= ',title='.$this-&gt;escape($title, true); if($content) $msg .= ',content='.$this-&gt;escape($content, true); if($picUrl) $msg .= ',image='.$this-&gt;escape($picUrl, true); $msg .= ']'; return $msg; } /** * 发送名片分享(contact) * @param string $type 分享类型，目前支持 qq/好友分享 group/群分享 * @param number $id 分享帐号，类型为qq，则为QQ号；类型为group，则为群号 * @return string CQ码_名片分享 */ public function cqCardShare($type = 'qq', $id) { $type = $this-&gt;escape($type, true); return &quot;[CQ:contact,type=$type,id=$id]&quot;; } /** * 匿名发消息（anonymous），仅支持群 * @param boolean $ignore 是否不强制，默认为 False。如果希望匿名失败时，将消息转为普通消息发送（而不是取消发送），请置本参数为 True * @return string CQ码_匿名 */ public function cqAnonymous($ignore = false) { return $ignore ? '[CQ:anonymous,ignore=true]' : '[CQ:anonymous]'; } /** * CQ码_图片(image) * @param string $path 图片路径，可使用网络图片和本地图片．使用本地图片时需在路径前加入 file:// * @return string CQ码_图片 */ public function cqImage ($path) { $path = $this-&gt;escape($path, true); return &quot;[CQ:image,file=$path]&quot;; } /** * 取CQ码_位置分享(location) * @param double $lat 纬度 * @param double $lon 经度 * @param int $zoom 放大倍数，可空，默认为 15 * @param string $title 地点名称，建议12字以内 * @param string $content 地址，建议20字以内 * @return string CQ码_位置分享 */ public function cqLocation ($lat, $lon, $zoom = 15, $title, $content) { $title = $this-&gt;escape($title, true); $content = $this-&gt;escape($content, true); return &quot;[CQ:location,lat=$lat,lon=$lon,zoom=$zoom,title=$title,content=$content]&quot;; } /** * 取CQ码_音乐(music) * @param number $songID 音乐的歌曲数字ID * @param string $type 音乐网站类型，目前支持 qq/QQ音乐 163/网易云音乐 xiami/虾米音乐，默认为qq * @param bool $newStyle 是否启用新版样式，目前仅 QQ音乐 支持 * @return string CQ码_音乐 */ public function cqMusic ($songID, $type = 'qq', $newStyle = false) //发送音乐 { $type = $this-&gt;escape($type, true); $newStyle = $newStyle ? 1 : 0; return &quot;[CQ:music,id=$songID,type=$type,style=$newStyle]&quot;; } /** * 取CQ码_音乐自定义分享(music) * @param string $url 分享链接，点击分享后进入的音乐页面（如歌曲介绍页） * @param string $audio 音频链接，音乐的音频链接（如mp3链接） * @param string $title 标题，可空，音乐的标题，建议12字以内 * @param string $content 内容，可空，音乐的简介，建议30字以内 * @param string $image 封面图片链接，可空，音乐的封面图片链接，留空则为默认图片 * @return string CQ码_音乐自定义分享 */ public function cqCustomMusic($url, $audio, $title = '', $content = '', $image = '') //发送自定义音乐分享 { $url = $this-&gt;escape($url, true); $audio = $this-&gt;escape($audio, true); $para = &quot;[CQ:music,type=custom,url=$url,audio=$audio&quot;; if($title) $para .= ',title='.$this-&gt;escape($title, true); if($content) $para .= ',content='.$this-&gt;escape($content, true); if($image) $para .= ',image='.$this-&gt;escape($image, true); $para .= ']'; return $para; } /** * 取CQ码_语音(record) * @param string $path 语音路径，可使用网络和本地语音文件．使用本地语音文件时需在路径前加入 file:// * @return string CQ码_语音 */ public function cqRecord($path) { $path = $this-&gt;escape($path, true); return &quot;[CQ:record,file=$path]&quot;; } /** * 转义 * @param string $msg 要转义的字符串 * @param boolean $escapeComma 转义逗号，默认不转义 * @return string 转义后的字符串 */ public function escape ($msg, $escapeComma=false) { $msg = str_replace('[', '&amp;#91;', $msg); $msg = str_replace(']', '&amp;#93;', $msg); $msg = str_replace('&amp;', '&amp;amp;', $msg); if($escapeComma) $msg = str_replace(',', '&amp;#44;', $msg); return $msg; } /** * 取CQ码_大表情(bface) * @param int $pID 大表情所属系列的标识 * @param int $id 大表情的唯一标识 * @return string CQ码_大表情 */ public function cqBigFace($pID, $id) { return &quot;[CQ:bface,p=$pID,id=$id]&quot;; } /** * 取CQ码_小表情(sface) * @param int $id 小表情代码 * @return string CQ码_小表情 */ public function cqSmallFace($id) { return &quot;[CQ:sface,id=$id]&quot;; } /** * 取CQ码_厘米秀(show) * @param int $id 动作代码 * @param number $qq 动作对象，可空，仅在双人动作时有效 * @param string $content 消息内容，建议8个字以内 * @return string CQ码_厘米秀 */ public function cqShow ($id, $qq = null, $content = '') { $msg = '[CQ:show,id='.$id; if($qq) $msg .= ',qq='.$qq; if($content) $msg .= ',content='.$this-&gt;escape($content, true); $msg .= ']'; return $msg; } }","link":"/2020/04/14/2020-04-14-socket%E9%80%9A%E8%AE%AF%E6%8F%92%E4%BB%B6-jailBot/"},{"title":"函数计算搭建点赞","text":"此项目为 机器人逻辑框架的功能。http://失效/archives/76.html 其中数据库表 【下载 qqmz.sql】 命名空间为\\qqgray 创建函数 qrlogin –用来扫码登录解析 ##创建SCF函数计算 创建HTTP触发器 编写函数计算代码 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768 &lt;?phpuse RingCentral\\Psr7\\Response;/*To enable the initializer feature (https://help.aliyun.com/document_detail/89029.html)please implement the initializer function as below：function initializer($context) { echo 'initializing' . PHP_EOL;}*/require_once 'qrlogin.php';function handler($request, $context): Response{ $body = $request-&gt;getBody()-&gt;getContents(); $queries = $request-&gt;getQueryParams(); $method = $request-&gt;getMethod(); $headers = $request-&gt;getHeaders(); $path = $request-&gt;getAttribute('path'); $requestURI = $request-&gt;getAttribute('requestURI'); $clientIP = $request-&gt;getAttribute('clientIP'); $_POST= setPOST($body); return new Response( 200, [ 'Content-Type'=&gt;'html', 'custom_header1' =&gt; 'v1', 'custom_header2' =&gt; ['v2', 'v3'], ], logic() );}function setPOST($body){ if($body==''){ return []; } $arr=explode('&amp;',$body); foreach ($arr as $item){ $arr_tmp=explode('=',$item); $arrnew[$arr_tmp[0]]=$arr_tmp[1]; } return $arrnew;}function logic(){ require_once 'qrlogin.php'; $conn=new \\qqgray\\Qrlogin(); //给jailbotPHP if(isset($_POST['json'])){ return json_encode($conn-&gt;getqrpic()); } //给jailbotPHP if(isset($_POST['sig'])){ return json_encode($conn-&gt;qqlogin($_POST['sig'])); } }?&gt; 在创建一个函数-》这次选择【事件触发】 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;?phprequire_once './vendor/autoload.php';require_once 'qzone.php';use think\\facade\\Db;function handler($event, $context) { $logger = $GLOBALS['fcLogger']; Db::setConfig([ // 默认数据连接标识 'default' =&gt; 'mysql', // 数据库连接信息 'connections' =&gt; [ 'mysql' =&gt; [ // 数据库类型 'type' =&gt; 'mysql', // 主机地址 'hostname' =&gt; '**********tencentcdb.com', // 用户名 'username' =&gt; '***', // 数据库名 'database' =&gt; '***', // 数据库编码默认采用utf8 'charset' =&gt; 'utf8', // 数据库表前缀 'prefix' =&gt; '', 'password' =&gt; '********', // 端口 'hostport' =&gt; '***********8', // 数据库调试模式 'debug' =&gt; false, ] ] ]); $task=Db::table('usersqq')-&gt;where('alive','1')-&gt;chunk(20, function($users) { foreach ($users as $a) { // 对100条用户数据进行处理操作 $q=new \\qqtask\\qzone($a['uin'],$a['sid'],$a['skey'],$a['pskey'],$a['superkey']); $q-&gt;like(1); if($q-&gt;active==false){ Db::table('usersqq') -&gt;where('uin',$a['uin']) -&gt;update( $update=['alive'=&gt;'0']); } }}); $logger-&gt;info('okkk');} 创建定时触发器 那就搞定了？？","link":"/2020/04/16/2020-04-16-SCF%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E6%90%AD%E5%BB%BA%E7%82%B9%E8%B5%9E/"},{"title":"iCloud家庭共享上车200G","text":"![V~B8PB4QGZ)W19BY43CARO.png 1：什么是icloud? 答: icloud是苹果云端，是无缝打通iphone设备，进行 备忘录/通讯录/照片 /文件 整机备份/同步 。 icloud的其中一部分功能：网盘作用。可以外联，并且时间不限制，流量不限，下载速度不限制。很多大佬的网站都用icloud外链文件，非常不错，还可以设置下载限制。 2：目前icloud官方收费是多少？答： 默认iPhone用户 赠送5G免费空间，如果需要扩展额外的非要 6元/50G/月 3：什么是家庭共享答：由我发起组件家庭，把你的appleID拉入我的家庭里，就可以共享储存空间 额度。目前我开了两个车小车 是200G空间，大车 是2T空间 4：家庭共享 后 大家的隐私？答：apple对隐私保护非常高，每个家庭成员都是 独立的，互相看不到的。 5：如何上车？答：请联系我的邮箱 admin@qqfirst.com 6:费用怎么计算答：暂时没有费用，我会负责费用，后期如果需要费用，也只是官方的1-5折之间，并且享有大空间！！！！ 附加：使用手机上传到icloud，并且分享外链。1：选中分享文件-》添加成员 2：编辑外链分享设置。 3: 生成链接发给朋友 分享的文件 外链效果 !!! .container img{width:100%} !!!","link":"/2020/04/28/2020-04-28-iCloud%E5%AE%B6%E5%BA%AD%E5%85%B1%E4%BA%AB%E4%B8%8A%E8%BD%A6200G/"},{"title":"最新QQ头像外链接","text":"1http://q1.qlogo.cn/g?b=qq&amp;nk=123456789&amp;s=640","link":"/2021/08/14/2021-08-14-%E6%9C%80%E6%96%B0QQ%E5%A4%B4%E5%83%8F%E5%A4%96%E9%93%BE%E6%8E%A5/"},{"title":"SCF函数计算镜像部署webman业务","text":"例子：在webman框架中编写一个发送邮件业务的接口，并且部署到云函数上腾讯云SCF特点，全局只读，只有/tmp可写 1: 编写代码，修改代码 2: 本地测试运行 3: 编写dockerfile， 推送到腾讯云镜像仓库 4: 构建docker镜像，并且推送到腾讯云镜像仓库 5: 部署到SCF 6: 测试 1: 编写代码，修改代码1.1 下载webman https://www.workerman.net/doc/webman#/install1.2 修改 start.php cli启动文件(因为上面说了 全局只读，workerman有一个log日志文件默认写入) 1234if(!file_exists(runtime_path().'/logfile')){ file_put_contents(runtime_path().'/logfile',' ');}Worker::$logFile=runtime_path().'/logfile'; 1.3 删除 /config/route.php 默认路由(不删除 不存在的路由会报错，无法启动框架) 1.4 修改 /config/server.php 默认的http监听端口，通过server_listen环境变量传入 1.5 composer安装 PHPMailer/PHPMailer拓展,并且开始写业务代码env() 函数来获取 环境变量，包括SCF传入的环境变量 1234567891011121314151617181920212223242526272829303132333435363738&lt;?phpnamespace app\\v1\\controller;use PHPMailer\\PHPMailer\\PHPMailer;use support\\Request;/** * Class Email * @package app\\v1\\Controller */class Email{ public function send(Request $request) { $mail = new PHPMailer(true); $mail-&gt;isSMTP(); $mail-&gt;SMTPDebug = 0; $mail-&gt;CharSet = 'UTF-8'; $mail-&gt;Host = env('V1_Email_Host'); // SMTP服务器 $mail-&gt;SMTPAuth = true; // 允许 SMTP 认证 $mail-&gt;Username = env('V1_Email_Username'); // SMTP 用户名 即邮箱的用户名 $mail-&gt;Password = env('V1_Email_Password'); // SMTP 密码 部分邮箱是授权码(例如163邮箱) $mail-&gt;SMTPSecure = 'ssl'; // 允许 TLS 或者ssl协议 $mail-&gt;Port = 465; // 服务器端口 25 或者465 具体要看邮箱服务器支持 $mail-&gt;isHTML(true); $mail-&gt;Subject = 'SCF函数发送邮件'; $mail-&gt;Body = '&lt;h1&gt;这里是邮件内容&lt;/h1&gt;' . date('Y-m-d H:i:s'); $mail-&gt;setFrom($mail-&gt;Username); //发件人 $mail-&gt;addAddress($request-&gt;get('target')); // 收件人 $mail-&gt;send(); return json([ 'code' =&gt; 0, 'msg' =&gt; '发送成功' ]); }} 2: 本地测试1php start.php start 本地启动框架 HTTP测试成功 3:编写dockerfile 12345678910111213141516171819202122FROM qqfirst/webman#下面操作都在容器 /app目录下WORKDIR /app#复制当前目录文件到 容器/app下COPY / /app/# 执行shell composer installRUN composer install# 创建 容器 /tmp 可写目录RUN mkdir -p /tmp# 删除 /app/runtime 自带运行目录RUN rm -rf /app/runtime# 软链接 宿主机的/tmp 可写目录 到 容器/app/runtime目录RUN ln -s /tmp /app/runtime# 设置环境变量 默认 config/server.php 配置ENV server_listen=http://0.0.0.0:9000ENV SERVER_PROCESS_COUNT=2#暴露 90000EXPOSE 9000CMD [&quot;php&quot;,&quot;/app/start.php&quot;,&quot;start&quot;] 4: 开始docker构建4.1 在这之前，我们去腾讯云 镜像仓库开通一个仓库 scf_webman_mail 根据仓库提示，我们的完整 命名空间是 ccr.ccs.tencentyun.com/pepper/scf_webman_mail 4.2 开始docker 构建1docker build -t ccr.ccs.tencentyun.com/pepper/scf_webman_mail . 4.3 构建完毕后 推送腾讯仓库。（新机器需要 docker login 登陆，请自己了解腾讯云镜像仓库）1docker push ccr.ccs.tencentyun.com/pepper/scf_webman_mail 5: 部署到SCF 检查下，大概就是这样 6: HTTP测试 你看我就说 64Mb内存足够了，运行时间1ms，多亏了workerman框架 拯救了php-fpm的”慢”","link":"/2021/09/05/2021-09-05-SCF%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E9%95%9C%E5%83%8F%E9%83%A8%E7%BD%B2webman%E4%B8%9A%E5%8A%A1/"},{"title":"王者荣耀扫码登录上号","text":"微信区使用方法代练员：代练员，用微信扫下面二维码，加载页面，然后截图页面中的信息（二维码）发给用户。微信中不要关闭网页。 用户： 使用扫二维码扫描，代练员发过来的二维码。（不能保存到相册扫一扫，必须要用摄像头扫码） 1https://open.weixin.qq.com/connect/app/qrconnect?appid=wx95a3a4d7c627e07d&amp;bundleid=com.tencent.smoba&amp;scope=snsapi_base,snsapi_userinfo,snsapi_friend,snsapi_message&amp;state=weixin","link":"/2021/11/19/2021-11-19%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E6%89%AB%E7%A0%81%E7%99%BB%E5%BD%95%E4%B8%8A%E5%8F%B7/"},{"title":"正方教务系统计算GPA","text":"正方教务系统计算GPA 1234567891011121314151617181920212223242526var form = document.getElementsByTagName('tbody')[0];//form.children 获得表单的十五行 下标 1-15var zongfen = 0;//分母和var zongxuefen = 0;var product = 0;//分子和var j = 0;for (let i = 1; i &lt; form.children.length; i++) { var credit = Number(form.children[i].children[9].innerText);//绩点 var score = Number(form.children[i].children[7].innerText);//成绩 var xuefen = Number(form.children[i].children[6].innerText)//学分 var kemu = form.children[i].children[4].innerText; if (form.children[i].children[5].innerText == '必修' &amp;&amp; score &gt;= 60) { j+=1; console.log(`${kemu} 学分：${xuefen} 成绩：${score} 绩点：${credit}`); zongfen+=credit*xuefen; zongxuefen+=xuefen; }}console.log('目前全部必修科目的平均加权绩点为'+(zongfen/zongxuefen).toFixed(2))alert('目前全部必修科目的平均加权绩点为'+(zongfen/zongxuefen).toFixed(2))zongfen = 0;zongxuefen = 0","link":"/2022/02/08/2022-02-08%E6%AD%A3%E6%96%B9%E6%95%99%E5%8A%A1%E7%B3%BB%E7%BB%9F%E8%AE%A1%E7%AE%97GPA/"},{"title":"AlpineLinux一些软件","text":"AlpineLinux一些软件 AB测压1apk add apache2-utils","link":"/2022/03/01/2022-03-01AlpineLinux%E4%B8%80%E4%BA%9B%E8%BD%AF%E4%BB%B6/"},{"title":"PHP读取tty","text":"读取Linux TTY 1234567891011121314&lt;?php//echo &quot;1234&quot;; // 5 characters of padding at the end// echo &quot;\\033[6D&quot;; // Move 5 characters backwardfunction read(){ $fp = fopen('/dev/stdin', 'r'); $input = fgets($fp, 255); fclose($fp);//移除字符串右侧的字符： $input = chop($input); return $input;}echo read(); PHP执行实时命令，php实时输出1234567$a = popen('nload', 'r');while ($b = fgets($a, 2048)) { echo $b . &quot;------------------\\n&quot;;}pclose($a);","link":"/2022/05/12/2022-05-12PHP%E8%AF%BB%E5%8F%96tty/"},{"title":"易支付docker-compose部署","text":"易支付docker-compose部署 12345678910111213141516171819202122232425262728293031323334353637version: &quot;3.0&quot;services: paywebfpm: build: ./web ports: - 80:80 volumes: - ./web:/app/ #宿主机：容器 dns: - 223.5.5.5 - 223.6.6.6 networks: pay-network: aliases: - paywebfpm mariadb: image: qqfirst/mariadb:latest ports: - 3306:3306 depends_on: - paywebfpm environment: - &quot;ROOT_PASSWORD:123456&quot; volumes: - ./mysql:/var/lib/mysql dns: - 223.5.5.5 - 223.6.6.6 networks: pay-network: aliases: - mariadbnetworks: pay-network: # driver: custom-driver-1","link":"/2022/05/12/2022-05-12%E6%98%93%E6%94%AF%E4%BB%98docker-compose%E9%83%A8%E7%BD%B2/"},{"title":"macOS下超级精选软件推荐","text":"1.腾讯爱截图 (腾讯官方且免费)官网：https://jietu.qq.com/ 可录制屏幕，录制后非常小，导出mp4，并且支持简单的剪辑 2. 柠檬 (腾讯官方且免费)网址 https://lemon.qq.com/ 支持网速、内存、CPU状态栏显示。清理垃圾 MacOS下，大文件清理工具，macos系统数据太大可用此工具查看占用大的文件，然后删除 Macos精品软件下载地https://macwk.com/","link":"/2022/05/14/2022-05-14macOS%E4%B8%8B%E8%B6%85%E7%BA%A7%E7%B2%BE%E9%80%89%E8%BD%AF%E4%BB%B6%E6%8E%A8%E8%8D%90/"},{"title":"王者荣耀水晶充值计算","text":"无优惠活动情况下，按照361次数比出270点卷/5*361=19494 优惠充值活动下,充值6元40点券一次*361=14440 点卷 (按照200点券抽5次，就是40一次) 6元=150点券(90送+60本金)所以 14440/150*6 =577.6 优惠充值活动下，充值 30元领取活动: 30元=465点券(90送+300本金+30送+ 45(抽奖一次40计算) ) 40点券361=14440 点券所以14440/46530=931.61 元 优惠充值活动下，充值 1元领取活动: 1元=50 点券(40送+10本金(抽奖一次40计算) ) 40点券361=14440 点券所以14440/501=288.88 元 Ps，每期首5次抽可送1次，即 200点券，抽6次，每次33.33点券33.33点券361/501=240 元 最终得出无任何活动，充值19494元 可出水晶参与活动，每次按照1元，充值288.8元可 出水晶参与活动，每次按照6元，充值577.6元可 出水晶参与活动，每次按照30元，充值931.61元可 出水晶","link":"/2022/05/14/2022-05-14%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E6%B0%B4%E6%99%B6%E5%85%85%E5%80%BC%E8%AE%A1%E7%AE%97/"},{"title":"MacosM1安装ipa","text":"command+shift+G 进入文件夹 1~/Library/Group Containers/K36BKF7T3D.group.com.apple.configurator/Library/Caches/Assets/TemporaryItems/MobileApps/ 1sudo xattr -rd com.apple.quarantine /Applications/appName.app","link":"/2022/05/15/2022-05-15MacosM1%E5%AE%89%E8%A3%85ipa/"},{"title":"王者荣耀自动签到","text":"王者荣耀自动签到包含 点赞+100币 浏览+100币 启动游戏+25币 分享战绩+25币 总共250币！ 一个月30天=7500币，可换 3张改名卡，或其他 1. 下载代码包，到 腾讯云云开发部署，选择go1 语言，并且超时时间&gt;=15秒点击下载main.go代码包 2. 王者营地抓包 王者抓包userid和token以及gameroleid !!! !!! 王者抓包MsdkToken.mp4 !!! !!! 3. 环境变量设置，和定时器设置12345678910{ &quot;triggers&quot;: [ { &quot;name&quot;: &quot;dayOn1clock&quot;, &quot;type&quot;: &quot;timer&quot;, &quot;config&quot;: &quot;0 2 0 * * * *&quot; } ]} 设置4个环境变量1234gameroleidmsdktokentokenuserid 最终结果","link":"/2022/05/15/2022-05-15%E7%8E%8B%E8%80%85%E8%8D%A3%E8%80%80%E8%87%AA%E5%8A%A8%E7%AD%BE%E5%88%B0/"},{"title":"golinux运行main.&#x2F;main:notfound","text":"go linux运行main ./main: not found ./main: not found golang主要是用的gun-libc库，而有些发行版的linux默认没有，例如alpine linux，执行以下命令，软连接musl-libc，因为这两个库基本兼容，或者你可以自己安装gun-libc，但是alpinelinux 官方说这样就和其他发行版没区别了，主要是为了小巧，仅10Mb的操作系统 12mkdir /lib64ln -s /lib/libc.musl-x86_64.so.1 /lib64/ld-linux-x86-64.so.2 alpine安装go gcc1apk add gcc g++ make cmake gfortran libffi-dev openssl-dev libtool","link":"/2022/05/18/2022-05-18golinux%E8%BF%90%E8%A1%8Cmain-main-notfound/"},{"title":"业余无线电ABC考试题库、数据库，下载","text":"1.点击下载，离线翻阅版：q_bank.html》〉》下载q_bank.html 《〈《 2.网站数据库,Mysql类型下载q_bank.sql 3.在线观看","link":"/2022/06/02/2022-06-02%E4%B8%9A%E4%BD%99%E6%97%A0%E7%BA%BF%E7%94%B5ABC%E8%80%83%E8%AF%95%E9%A2%98%E5%BA%93%E3%80%81%E6%95%B0%E6%8D%AE%E5%BA%93%EF%BC%8C%E4%B8%8B%E8%BD%BD/"},{"title":"p2p文章分享","text":"P2P打洞 https://blog.csdn.net/weixin_43996758/article/details/122898199 https://www.icode9.com/content-4-981592.html clientA ClientB 结果 nat1 nat1 ok nat1 nat2 ok nat1 nat3 ok nat1 nat4 ok nat2 nat2 ok nat2 nat3 ok nat2 nat4 ok nat3 nat3 ok nat3 nat4 false nat4 nat4 false","link":"/2022/06/23/2022-06-23p2p%E6%96%87%E7%AB%A0%E5%88%86%E4%BA%AB/"},{"title":"Alpine安装smb","text":"SMB是Server Message Block的缩写，也被称为SMB协议或CIFS（Common Internet File System）。 1apk add samba 添加授权用户smb1 1adduser smb1 设置smb用户密码 1smbpasswd -a smb1 1vim /etc/samba/smb.conf 123456789101112131415161718[global]#to allow symlinks from everywhereallow insecure wide links = yes workgroup = WORKGROUPdos charset = cp866unix charset = utf-8force user = smb1[xxx]# to follow symlinksfollow symlinks = yes # to allow symlinks from outsidewide links = yes browseable = yeswriteable = yespath = /root/##config down 开机自启 1rc-update add samba 启动 1rc-service samba start","link":"/2022/06/29/2022-06-29Alpine%E5%AE%89%E8%A3%85smb/"},{"title":"Alpine同步时间ntp","text":"1ntpd -d -q -n -p ntp3.aliyun.com 开机对时： 123vim vim /etc/local.d/ntp.startrc-update add local","link":"/2022/06/30/2022-06-30Alpine%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4ntp/"},{"title":"正则表达式","text":"一些常见的正则 符号 功能 备注 普通字符 [] []匹配[...] 中的所有字符，例如 [aeiou] 匹配字符串 “google runoob taobao” 中所有的 e o u a 字母 普通字符 [^] [^]例如 [^aeiou] 匹配字符串 “google runoob taobao” 中除了 e o u a 字母的所有字母。 普通字符 [a-z] 匹配一个区间 普通字符 . 匹配除换行符（\\n、\\r）之外的任何单个字符，相等于 [^\\n\\r]。 普通字符 [\\s\\S] 匹配所有。\\s 是匹配所有空白符，包括换行，\\S 非空白符，不包括换行。 普通字符 \\w 匹配字母、数字、下划线。等价于 [A-Za-z0-9_] 普通字符 非打印字符也可以是正则表达式的组成部分。下表列出了表示非打印字符的转义序列： \\cx 匹配由x指明的控制字符。例如， \\cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。 非打印字符 \\f 匹配一个换页符。等价于 \\x0c 和 \\cL。 非打印字符 \\n 匹配一个换行符。等价于 \\x0a 和 \\cJ。 非打印字符 \\r 匹配一个回车符。等价于 \\x0d 和 \\cM。 非打印字符 \\s 匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \\f\\n\\r\\t\\v]。注意 Unicode 正则表达式会匹配全角空格符。 非打印字符 \\S 匹配任何非空白字符。等价于 [^ \\f\\n\\r\\t\\v]。 非打印字符 \\t 匹配一个制表符。等价于 \\x09 和 \\cI`。 非打印字符 \\v 匹配一个垂直制表符。等价于 \\x0b 和 \\cK。 非打印字符 特殊字符，所谓特殊字符，就是一些有特殊含义的字符， $ 匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\\n' 或 '\\r'。要匹配 $ 字符本身，请使用 \\$。 ( ) 标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \\( 和 \\)。 * 匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \\*。 + 匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \\+。 . 匹配除换行符 \\n 之外的任何单字符。要匹配 . ，请使用 \\. 。 [ 标记一个中括号表达式的开始。要匹配 [，请使用 \\[。 ? 匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \\?。 \\ 将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\\n' 匹配换行符。序列 '\\\\' 匹配 &quot;\\&quot;，而'\\(' 则匹配 &quot;(&quot;。 ^ 匹配输入字符串的开始位置，除非在方括号表达式中使用，当该符号在方括号表达式中使用时，表示不接受该方括号表达式中的字符集合。要匹配 ^ 字符本身，请使用 \\^。 { 标记限定符表达式的开始。要匹配 {，请使用 \\{。 &amp;#124 指明两项之间的一个选择。要匹配\\&amp;#124;，请使用\\&amp;#124;。 限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配 + + 号代表前面的字符必须至少出现一次（1次或多次），例如，’zo+’ 能匹配 “zo” 以及 “zoo”，但不能匹配 “z”。+ 等价于 {1,}。 * *号代表前面的字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）。例如，zo* 能匹配 “z” 以及 “zoo”。* 等价于{0,}。 ? ? 问号代表前面的字符最多只可以出现一次（0次或1次）。如，”do(es)?” 可以匹配 “do” 、 “does” 中的 “does” 、 “doxy” 中的 “do” 。? 等价于 {0,1}。 {n} n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 “Bob” 中的 ‘o’，但是能匹配 “food” 中的两个 o。 {n,} n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 “Bob” 中的 ‘o’，但能匹配 “foooood” 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。 {n,m} m 和 n 均为非负整数，其中n &lt;= m。最少匹配 n 次且最多匹配 m 次。例如，&quot;o{1,3}&quot; 将匹配 “fooooood” 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。 * 和 + 限定符都是贪婪的，因为它们会尽可能多的匹配文字，只有在它们的后面加上一个 ? 就可以实现非贪婪或最小匹配。例如 /&lt;.*&gt;/ ，/&lt;.*?&gt;/ 分别匹配 &lt;h1&gt;&lt;/h1&gt;， &lt;h1&gt;","link":"/2022/07/07/2022-07-07%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"},{"title":"Linux操作应用PDF","text":"一些常见的操作大全PDF在线看","link":"/2022/07/24/2022-07-24Linux%E6%93%8D%E4%BD%9C%E5%BA%94%E7%94%A8PDF/"},{"title":"暗区任务地点-暗区任务地点-空无一人的海岸，从被海浪推来的垃圾和山上无人的广播站能看出这里曾经的热闹。","text":"","link":"/2022/08/13/2022-08-13-%E6%9A%97%E5%8C%BA%E4%BB%BB%E5%8A%A1%E5%9C%B0%E7%82%B9-%E7%A9%BA%E6%97%A0%E4%B8%80%E4%BA%BA%E7%9A%84%E6%B5%B7%E5%B2%B8%EF%BC%8C%E4%BB%8E%E8%A2%AB%E6%B5%B7%E6%B5%AA%E6%8E%A8%E6%9D%A5%E7%9A%84%E5%9E%83%E5%9C%BE%E5%92%8C%E5%B1%B1%E4%B8%8A%E6%97%A0%E4%BA%BA%E7%9A%84%E5%B9%BF%E6%92%AD%E7%AB%99%E8%83%BD%E7%9C%8B%E5%87%BA%E8%BF%99%E9%87%8C%E6%9B%BE%E7%BB%8F%E7%9A%84%E7%83%AD%E9%97%B9%E3%80%82/"},{"title":"FPR快速配置","text":"FRPS配置12345678910111213141516171819202122[common]bind_addr = 0.0.0.0bind_port = 7000bind_udp_port = 7001kcp_bind_port = 7000vhost_http_port = 80vhost_https_port = 443dashboard_addr = 0.0.0.0dashboard_port = 7002dashboard_user = admindashboard_pwd = login_passwordlog_file = ./frps.loglog_level = infolog_max_days = 1disable_log_color = falseauthentication_method = tokenauthenticate_new_work_conns = truetoken = login_tokenallow_ports =100-999, 2000-3000,3001,3003,4000-50000max_pool_count = 5max_ports_per_client = 0tcp_mux = true run1234docker run -d --name=frps --restart=always \\ --network host \\ -v /root/frps.ini:/frp/frps.ini \\ stilleshan/frps","link":"/2022/08/13/2022-08-13FPR%E5%BF%AB%E9%80%9F%E9%85%8D%E7%BD%AE/"},{"title":"KangleServer","text":"kangle CHM手册 下载 kangle中文帮助手册help_chm.rar kangle中文帮助手册.pdf Centos安装手动安装 cmake 12345yum install -y wget wget https://github.com/Kitware/CMake/releases/download/v3.15.5/cmake-3.15.5.tar.gztar -zxvf cmake-3.15.5.tar.gzcd cmake-3.15.5./bootstrap &amp;&amp; make -j4 &amp;&amp; make install 手动安装 zlib 1234wget http://www.zlib.net/zlib-1.2.12.tar.gztar -zxvf zlib-1.2.12.tar.gzcd zlib-1.2.12./configure &amp;&amp; make &amp;&amp; make install 手动安装openssl 1234567wget https://www.openssl.org/source/openssl-1.1.1b.tar.gz --no-check-certificatetar zxvf openssl-1.1.1b.tar.gzcd openssl-1.1.1b./configmakemake install","link":"/2022/08/14/2022-08-14KangleServer/"},{"title":"暗区任务地点-北山通信站外的岗哨亭，为防备攻击加装了多层拦阻设备。","text":"","link":"/2022/08/15/2022-08-15-%E6%9A%97%E5%8C%BA%E4%BB%BB%E5%8A%A1%E5%9C%B0%E7%82%B9-%E5%8C%97%E5%B1%B1%E9%80%9A%E4%BF%A1%E7%AB%99%E5%A4%96%E7%9A%84%E5%B2%97%E5%93%A8%E4%BA%AD%EF%BC%8C%E4%B8%BA%E9%98%B2%E5%A4%87%E6%94%BB%E5%87%BB%E5%8A%A0%E8%A3%85%E4%BA%86%E5%A4%9A%E5%B1%82%E6%8B%A6%E9%98%BB%E8%AE%BE%E5%A4%87%E3%80%82/"},{"title":"暗区任务地点-若是站到礁石上应当能远远看到西南方的灯塔","text":"","link":"/2022/08/15/2022-08-15-%E6%9A%97%E5%8C%BA%E4%BB%BB%E5%8A%A1%E5%9C%B0%E7%82%B9-%E8%8B%A5%E6%98%AF%E7%AB%99%E5%88%B0%E7%A4%81%E7%9F%B3%E4%B8%8A%E5%BA%94%E5%BD%93%E8%83%BD%E8%BF%9C%E8%BF%9C%E7%9C%8B%E5%88%B0%E8%A5%BF%E5%8D%97%E6%96%B9%E7%9A%84%E7%81%AF%E5%A1%94/"},{"title":"fyne windows下gui编译错误","text":"好麻烦，有无快捷办法 https://blog.csdn.net/weixin_64064486/article/details/123940266 【更新】 https://developer.fyne.io/started/#prerequisites 1.下载,并安装https://github.com/msys2/msys2-installer/releases/download/2022-06-03/msys2-x86_64-20220603.exe 2.从 开始菜单打开MSYS2 3.输入命令 1pacman -Syu 选择 gcc 1pacman -S git mingw-w64-x86_64-toolchain","link":"/2022/08/18/2022-08-18-fyne-windows%E4%B8%8Bgui%E7%BC%96%E8%AF%91%E9%94%99%E8%AF%AF/"},{"title":"php拓展 php安装redis","text":"1git clone https://github.com/phpredis/phpredis 12345cd phpredisphpize ./configure --with-php-config=/www/server/php/73/bin/php-configmake &amp;&amp; make installls /www/server/php/73/lib/php/extensions/no-debug-non-zts-20180731/ 追加php.ini 12[redis]extension = /www/server/php/73/lib/php/extensions/no-debug-non-zts-20180731/redis.so","link":"/2022/08/18/2022-08-18-php%E6%8B%93%E5%B1%95-php%E5%AE%89%E8%A3%85redis/"},{"title":"php拓展-php安装yacyaconf拓展；ClassYaconfnotfound","text":"download resource1git clone https://github.com/laruence/yaconf 12345 cd yaconf/ phpize./configure --with-php-config=/www/server/php/73/bin/php-configmake -j make install 最后添加到php.ini 12extension=/www/server/php/73/lib/php/extensions/no-debug-non-zts-20180731/yaconf.so","link":"/2022/08/18/2022-08-18-php%E6%8B%93%E5%B1%95-php%E5%AE%89%E8%A3%85yacyaconf%E6%8B%93%E5%B1%95%EF%BC%9BClassYaconfnotfound/"},{"title":"php拓展-php安装sqlservesqlsrv-宝塔","text":"laravel报错 12Illuminate\\Database\\QueryExceptioncould not find driver (SQL: select top 1 * from [lswl_event] where [lswl_event].[event_id] = 1) 一、【加入微软的源】 1curl https://packages.microsoft.com/config/rhel/7/prod.repo &gt; /etc/yum.repos.d/mssqlrelease.repo 二、【安装驱动】 1yum -y install msodbcsql mssql-tools unixODBC-devel 3、编译 123456789wget http://pecl.php.net/get/pdo_sqlsrv-5.8.0.tgztar -zxvf pdo_sqlsrv-5.8.0.tgzcd pdo_sqlsrv-5.8.0phpize./configure --with-php-config=/www/server/php/73/bin/php-configmakemake install 4、 修改php.ini 1extension=/www/server/php/73/lib/php/extensions/no-debug-non-zts-20180731/pdo_sqlsrv.so","link":"/2022/08/18/2022-08-18php%E6%8B%93%E5%B1%95-php%E5%AE%89%E8%A3%85sqlservesqlsrv-%E5%AE%9D%E5%A1%94/"},{"title":"php-pcntl+socket","text":"php-pcntl+socket② 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102&lt;?phpclass SocketServer{ public $socket; public $all_sockets = []; public function __construct(string $address) { //创建监听socket服务 资源句柄 ,,resource|false $this-&gt;socket = \\stream_socket_server($address, $php_errorcode, $php_errormsg); if ($this-&gt;socket == false) { throw new \\Exception('创建失败！', $php_errorcode, $php_errormsg); } \\stream_set_blocking($this-&gt;socket, false); //当前初始化的第一个socket服务 资源句柄放入 资源池 $this-&gt;all_sockets[intval($this-&gt;socket)] = $this-&gt;socket; echo ('=== 服务器启动|' . $address.PHP_EOL); } public function run() { //死循环 while (true) { $write=$except=null; $allSocket=$this-&gt;all_sockets; \\stream_select($allSocket, $write, $except, 60); foreach ($allSocket as $index =&gt; $socket) { //如果 streamsocket 服务句柄 == 当前socket资源池的id，说明有新连接 if ($this-&gt;socket === $socket) { // 接受由 stream_socket_server() 创建的套接字连接 timeout/覆盖默认的套接字接受的超时时限。输入的时间需以秒为单位 // resource|false $new_conn_socket = \\stream_socket_accept($this-&gt;socket); if ($new_conn_socket == false) { //可能是建立连接异常 continue; } $this-&gt;onConn($new_conn_socket); $this-&gt;all_sockets[intval($new_conn_socket)] = $new_conn_socket; echo '=== 新连接建立'.(int)($new_conn_socket).PHP_EOL; } else { //如果不是新的连接,则看看有无数据过来,读取长度 65536 $buff = fread($socket, 0xFFFF); // 不能是 == '' if ($buff === '' || $buff === false) { //客户端已断开 echo '=== 断开连接'.intval($socket).PHP_EOL; $this-&gt;onClose($socket); unset($this-&gt;all_sockets[intval($socket)]); fclose($socket); continue; } //处理发来的数据 $this-&gt;onMessage($socket, $buff); } } } } public function onConn(mixed $socket) { } public function onClose(mixed $socket) { } public function onMessage(mixed $socket, $buff) { $body = 'hello word'; $header = [ 'HTTP/1.1 200 OK', 'Connection: keep-alive', 'Niubi: test123', 'Content-length:' . strlen($body) ]; $header_string = \\implode(chr(0x0D) . chr(0x0A), $header); $data = $header_string . chr(0x0D) . chr(0x0A) . chr(0x0D) . chr(0x0A) . $body;// echo '用户数据：'.$buff.PHP_EOL; fwrite($socket, $data); unset($this-&gt;all_sockets[intval($socket)]); fclose($socket); }}$a = new SocketServer('tcp://0.0.0.0:88');$a-&gt;run();;","link":"/2022/08/19/2022-08-19php-pcntl-socket/"},{"title":"php与pcntl","text":"php与pcntl① 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081&lt;?php$childs = [];function daemon(){ $pid = pcntl_fork(); if ($pid &lt; 0) { exit('错误无法创建'); } //子进程执行 if ($pid == 0) { echo sprintf('deamon子进程逻辑开始执行') . PHP_EOL; //2.让子进程会话变成主会话 $sid=posix_setsid(); if($sid&lt;=0){ echo('set fail'); } //3.修改工作目录 if(chdir('/')===false){ echo('fail to change dir '); } //4.与chmod相反 默认继承了父进程的文件创建掩码 umask(0); echo '子进程已经成为deamon'.PHP_EOL; //5.默认继承了父进程打开的文件，关闭后面子进程的输出输入linux终端 fclose(STDIN); fclose(STDOUT); fclose(STDERR); } //父进程执行 if ($pid &gt; 0) { // 第一步 exit('父进程('.posix_getpid().')退出'.PHP_EOL); }}function fork(){ $pid = pcntl_fork(); if ($pid &lt; 0) exit('错误无法创建'); //子进程执行 if ($pid == 0) { echo sprintf('子进程(%s)被创建', posix_getpid()) . PHP_EOL; //子进程永远阻塞这里,可以是业务代码 while (true) { sleep(10); } } //父进程执行，保留子进程的pid if ($pid &gt; 0) { global $childs; $childs[$pid] = $pid; }}//上面代码，定义 funciont damon() ; function fork()//父进程退出，子进程接管daemon();for ($i=0;$i&lt;3;$i++){ fork();}echo '子进程为(' . posix_getpid() . ')已经升级为父进程' . PHP_EOL;echo '开始作为deamon守护';while (count($childs)) { $exit_id = pcntl_wait($status); if ($exit_id &gt;= 0) { $msg = pcntl_wtermsig($status); //删除数组资源句柄 echo sprintf('子进程：(%s) 退出，原因：%s', $exit_id, $msg) . PHP_EOL; unset($childs[$exit_id]); } //monitor 监控子进程 //子进程数量不足2个，就fork()创建子进程 if (count($childs) &lt; 2) { fork(); }}","link":"/2022/08/19/2022-08-19php%E4%B8%8Epcntl/"},{"title":"用PHP实现位标记，用PHP二进制实现类似0777权限设计","text":"有人会问这个使用场景，比如 数据库字段你存一个用户的爱好集合，你使用json [“xx”,”xx”] 还是希望用一个int 来存集合? 目前我使用两种方案。第一种是转换为 二进制字符串，然后从右往左 按照位是否是==1 来标记集合.第二种使用 按位与&amp; 来实现，是否 爱好和 用户int 命中，如果两者的任意位 命中，那么 a&amp;b 一定&gt;0 也就是 !=false 也就是 !==0b0 先看看原理图 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182&lt;?php$map=[0=&gt;&quot;唱歌a&quot;,1=&gt;&quot;跳舞&quot;,2=&gt;&quot;洗澡&quot;,7=&gt;'睡觉a',8=&gt;'吃饭'];$decNum=129; // 010000001 (len=9,max_index=8) ; result=[&quot;唱歌&quot;,&quot;吃饭&quot;]$bin= decbin($decNum);$mapKeys=array_keys($map);$maxIndex=$mapKeys;ksort($maxIndex);$maxIndex=array_pop($maxIndex)+1;echo '转2进制(缩写)：'.$bin.&quot;&lt;/br&gt;&quot;;echo '转2进制(补全最大位)：'.sprintf(&quot;%0&quot;.$maxIndex.&quot;s&quot;,$bin).&quot;&lt;/br&gt;&quot;;function strMethod($dec,$map){ //取最大位数+1 $mapKeys=array_keys($map); $maxIndex=$mapKeys; ksort($maxIndex); $str= decbin($dec); $result=[]; //吧 0b1000 反转为 0b0001 ,因为 mapkey的第0=&gt; 是指 从右往左的 下标 $str=strrev($str); for($i=0;$i&lt;=strlen($str);$i++){ if(\\in_array($i,$mapKeys) &amp;&amp; intval($str[$i])===0b1){ $result[]=$map[$i]; } } return $result;}function bitOperation($dec,$map){ $mapKeys=array_keys($map); $maxIndex=$mapKeys; ksort($maxIndex); $maxIndex=array_pop($maxIndex)+0b1; /** * * array_filter结果是反转k=&gt;v; { [&quot;唱歌&quot;]=&gt; int(0) [&quot;跳舞&quot;]=&gt; int(1) [&quot;洗澡&quot;]=&gt; int(2) [&quot;睡觉&quot;]=&gt; int(7) [&quot;吃饭&quot;]=&gt; int(8) } * * array_filter(array,function($MapItemValue){ //return true 就是不过滤，false为过滤 //假设第1伦是 $MapItemValue=0 ; //(2== 0b10) * 唱歌 0b0+0b1=0b1=1 0b 1 0b010000001 * result : &amp;按位与 两个数二进制部分 相同索引的都是1才能 !=false (0b0)，所以这个是1 &gt;0 * 跳舞 0b01+0b01= 0b10=2 0b 10 0b010000001 * }) */ return array_filter(array_flip($map),function($MapItemValue)use ($dec,$maxIndex){// echo '本次 $MapItemValue='.sprintf(&quot;%0&quot;.$maxIndex.&quot;s&quot;,decbin(1&lt;&lt;$MapItemValue));// echo ';dec='.sprintf(&quot;%0&quot;.$maxIndex.&quot;s&quot;,decbin($dec));// echo ';&amp;结果'. (decbin(1&lt;&lt;$MapItemValue)&amp;$dec).';'; //这里犯错 (1&lt;&lt;$MapItemValue)&amp;$dec!==0b00000; //这里会优先 $dec!=0b0001 然后在&amp;// echo ((1&lt;&lt;$MapItemValue)&amp;$dec)!==0b00000;// echo &quot;&lt;br&gt;&quot;; return ((1&lt;&lt;$MapItemValue)&amp;$dec)!==0b00000; });}$result1=strMethod($decNum,$map);var_dump($result1);echo &quot;&lt;br&gt;&quot;;$result2=bitOperation($decNum,$map);var_dump(array_keys($result2)); 最终效果 1234转2进制(缩写)：10000001转2进制(补全最大位)：010000001array(2) { [0]=&gt; string(7) &quot;唱歌a&quot; [1]=&gt; string(7) &quot;睡觉a&quot; }array(2) { [0]=&gt; string(7) &quot;唱歌a&quot; [1]=&gt; string(7) &quot;睡觉a&quot; }","link":"/2022/08/29/2022-08-29%E7%94%A8PHP%E5%AE%9E%E7%8E%B0%E4%BD%8D%E6%A0%87%E8%AE%B0%EF%BC%8C%E7%94%A8PHP%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%9E%E7%8E%B0%E7%B1%BB%E4%BC%BC0777%E6%9D%83%E9%99%90%E8%AE%BE%E8%AE%A1/"},{"title":"dalao经验","text":"消息队列 redis订阅模式，点对点模式 看似木头 15:06:10Atlas还有你们redis队列用的pop还是 订阅@Atlas blpop, 看似木头 15:06:17订阅是广播, 看似木头 15:06:27blpop是单播 看似木头 15:06:55额, 其实是轮播, redis自己实现的负载均衡 看似木头 15:08:23广播可能会消耗redis大量的loop片段, 所以我们不用 2逼哥哥 15:08:32用redis的stream做消息队列爽得一p 看似木头 15:08:56stream也很不错 看似木头 15:09:08就是实现略微复杂 看似木头 15:14:00Atlas队列上，Redis 广播 场景是啥@Atlas 比如多路缓存更新 看似木头 15:14:19因为本地lo比局域网快相当多 看似木头 15:14:56还有就是并发实在太高, 比如500k/s 看似木头 15:15:11这时候要分好几个redis集群的. 看似木头 15:15:48那么集群同步更新某些数据, 方式之一就是这样洛 看似木头 15:16:01接收统一的配置命令,比如京东/淘宝上的秒杀活动 最佳的数组去重有个题目. 我有100k个手机号名单, 我给你1k个手机号, 让你查出来, 哪些手机号在名单中, 哪些不在array系列函数, 其实可以实现相当多算法. 虽然性能比起其他语言查许多. 但是光php本身, 合理利用array系列函数, 性能也能提升百倍 array_flip与isset","link":"/2022/09/01/2022-09-01dalao%E7%BB%8F%E9%AA%8C/"},{"title":"Docker跨架构编译","text":"Docker跨架构编译 1.启用buildx环境暴露1export DOCKER_CLI_EXPERIMENTAL=enabled 验证是否开启： 1docker buildx version 启用 binfmt_misc 如果你使用的是 Docker 桌面版（MacOS 和 Windows），默认已经启用了 binfmt_misc，可以跳过这一步。 1docker run --rm --privileged docker/binfmt:66f9012c56a8316f9244ffd7622d7c21c1f6f28d 2.createDocker 默认会使用不支持多 CPU 架构的构建器，我们需要手动切换。 1docker buildx create --use --name mybuilder 3.bootstrap启动构建器1docker buildx inspect mybuilder --bootstrap 123456789101112docker buildx inspect mybuilder --bootstrap[+] Building 0.7s (1/1) FINISHED =&gt; [internal] booting buildkit 0.7s =&gt; =&gt; starting container buildx_buildkit_mybuilder0 0.7sName: mybuilderDriver: docker-containerNodes:Name: mybuilder0Endpoint: unix:///var/run/docker.sockStatus: runningPlatforms: linux/arm64, linux/amd64, linux/riscv64, linux/ppc64le, linux/s390x, linux/386, linux/mips64le, linux/mips64, linux/arm/v7, linux/arm/v6 4.构建镜像buildx 需要提前通过 docker login 命令登录认证 Docker Hub。 1docker buildx build -t aa/aa --platform=linux/arm,linux/arm64,linux/amd64,linux/386,linux/arm/v7 . --push 1docker buildx build -t qqfirst/mariadb --platform=linux/arm,linux/arm64,linux/amd64,linux/386 . --push","link":"/2022/09/03/2022-09-03Docker%E8%B7%A8%E6%9E%B6%E6%9E%84%E7%BC%96%E8%AF%91/"},{"title":"docker国内镜像加速列表","text":"中科大镜像加速1https://docker.mirrors.ustc.edu.cn 2.阿里云 1https://vvyah8wl.mirror.aliyuncs.com","link":"/2022/09/04/2022-09-04docker%E5%9B%BD%E5%86%85%E9%95%9C%E5%83%8F%E5%8A%A0%E9%80%9F%E5%88%97%E8%A1%A8/"},{"title":"redis从0开始到集群","text":"介绍基本1234567891011121314151617181920redis 集群主从模式 缺点 从数据库可能会丢失部分数据，操作模式 使用DNS负载均衡,需要人工介入哨兵模式 自动化，sentinel工具。配置复杂，性能和高可用表现一般。 client应该连接哨兵sentinel节点，从哨兵那拿到 主从节点。 缺陷：1.单点写的节点故障，2. 数据恢复非常慢， 3.写性能瓶颈（10w并发） 主观故障：有一半节点认为主节点下线，哨兵启动巡警模式，处理，把主节点下线，从节点选出一个作为主节点 。从新的主节点复制数据。 客观故障：集群模式： 一个主节点+2个副本节点为一个集群， 可以有多个集群。 且master节点提供对外节点。 16384虚拟节点，平均给每个集群，每个节点负责部分范围的hash slot。 Client: 从 16384 % hashkey 的余数 落在那个集群上。理论上集群最大为 16384个，一般是1000个。 当一个集群master挂了，就从副本选一个数据全的作为master。 访问瞬断损失最小 实战，by docker下载 redis-default.conf redis.conf 默认 port 6379 12345#redis.confwget -O redis.conf /usr/uploads/2022/09/3831797556.conf#redis-default.confwget -O redis.conf /usr/uploads/2022/09/1047504143.conf 1234567891011121314151617181920redis.conf 修改 daemonize yes #进程守护运行 port 端口 protected-mode no #关闭保护模式 bind 127.0.0.1 #改成0.0.0.0 dir /usr/local/rediscluster/node1 #存放路径 #集群参数 cluster-enabled yes cluster-config-file nodes1.conf #redis自动维护的，建议改成节点名 cluster-node-timeout 5000 #集群内网超时 appendonly yes #数据同步 requirepass xxx ##主从复制的时候密码 masterauth xxx #副本连接Master密码 docker run -v `pwd`/redis.conf:/redis.conf -p 6379:6379 --name redis_cluster1 redis /redis.conf docker run -v `pwd`/redis.conf:/redis.conf -p 6379:6379 --name redis_cluster2 redis /redis.conf docker run -v `pwd`/redis.conf:/redis.conf -p 6379:6379 --name redis_cluster3 redis /redis.conf 创建集群,redis版本 &gt;=5123456789101112131415161718redis-cli --cluster #--cluster-relicas 1 副本个数# -a 密码登录redis-cli --cluster create ip:port ip:port ip:port --cluster-relicas 1 -a 密码## 连接测试redis-cli -a 密码 -h IP地址 -p 端口 ## 智能客户端 redis-cli -a 密码 -c -h IP地址 -p 端口 ## 计算哈希槽cluster keyslot a 展示slot 应该在那个槽## cluster info 集群信息 流量倾斜， 比如热点关键词big key常见问题1.为什么Waiting for the cluster to join 一直卡在这里 12https://www.cnblogs.com/luck-pig/p/12311320.html 2.At least 6 nodes are required. 123redis集群必须至少3个master ， --cluster-replicas 为1 的时候 一个master配1个s 副本，所以最少要6个redis 3.WRONGPASS invalid username-password pair 1使用 -a 密码来解决连接问题 实战Docker集群访问链接","link":"/2022/09/08/2022-09-08redis%E4%BB%8E0%E5%BC%80%E5%A7%8B%E5%88%B0%E9%9B%86%E7%BE%A4/"},{"title":"redis集群搭建docker-compose","text":"使用 docker 构建reids集群节点 默认配置文件，只需要修改 requirepass的密码和 masterpassauth 密码 授权 requirepass 默认 woshitiancai端口 port 默认 6379aof dir 默认 /data &gt; 1.构建镜像1docker build -t qqfirst/redis_cluster . &gt; 2.节点启动镜像12# 若要保存AOF，则外加 -v `pwd`/aof:/datadocker run -d --net=host --name redis_cluster qqfirst/redis_cluster &gt; 3.编排节点启动，或者使用已存在的节点1docker run -it --name redis_cluster qqfirst/redis_cluster sh &gt; 4.节点编排1redis-cli --cluster create ip:port ip:port ip:port --cluster-relicas 1 -a 密码 &gt; 例如1redis-cli --cluster create -a woshitiancai host.docker.internal:6378 host.docker.internal:6377 host.docker.internal:6376 host.docker.internal:6375 host.docker.internal:6374 host.docker.internal:6373 --cluster-replicas 1 使用docker-compose 构建集群(测试)&gt; 1.启动6个节点1docker-compose up &gt; 2.选择一个节点启动cluster1redis-cli --cluster create -a woshitiancai 10.0.0.2:6379 10.0.0.3:6379 10.0.0.4:6379 10.0.0.5:6379 10.0.0.6:6379 10.0.0.7:6379 --cluster-replicas 1 &gt; 附加1: 智能化客户端编排 hashkey &gt; 附加2：集群信息 常见问题1.为什么Waiting for the cluster to join 一直卡在这里12345671: https://www.cnblogs.com/luck-pig/p/12311320.html 2: 需要修改redis.conf 1378行# cluster-announce-ip 10.1.1.5# cluster-announce-port 6379# cluster-announce-bus-port 6380 2.At least 6 nodes are required.123redis集群必须至少3个master ， --cluster-replicas 为1 的时候 一个master配1个s 副本，所以最少要6个redis 3.WRONGPASS invalid username-password pair1使用 -a 密码来解决连接问题","link":"/2022/09/08/2022-09-08redis%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BAdocker-compose/"},{"title":"rabbitMQ从0开始","text":"官网https://www.rabbitmq.com/tutorials/tutorial-one-php.html 【搭建】使用docker搭建节点 这里使用免费的ｄｏｃｋｅｒ官网提供的３小时平台https://labs.play-with-docker.com/ 需要等一分钟 123docker run -d --hostname my-rabbit --name rabbit -p 15672:15672 -p 5672:5672 rabbitmq#开启WEB UIdocker exec -it rabbit rabbitmq-plugins enable rabbitmq_management 效果图屏幕截图 2022-09-09 104346.png PS1:问题 Stats in management UI are disabled on this node1echo management_agent.disable_metrics_collector = false &gt; /etc/rabbitmq/conf.d/management_agent.disable_metrics_collector.conf PS2: docker不支持http以外的访问搭建FRPC穿透 12345docker kill frpc &amp;&amp; docker rm frpc docker run -d --restart=always \\--name=frpc \\--net=host \\registry.cn-hangzhou.aliyuncs.com/qqfirst/frpc","link":"/2022/09/09/2022-09-09rabbitMQ%E4%BB%8E0%E5%BC%80%E5%A7%8B/"},{"title":"使用codeup云效自动部署到云函数","text":"云效code 1. codeup建立代码仓库使用gin 框架,golang:1.19Dockerfile文件放入你的项目中 123456789101112131415161718FROM golang:1.13.9-alpine3.11 as buildWORKDIR /appCOPY . /app# 构建RUN go env -w GO111MODULE=on &amp;&amp; \\ go env -w GOPROXY=https://goproxy.cn,direct &amp;&amp; \\ go mod tidy &amp;&amp; \\ CGO_ENABLED=0 GOOS=linux &amp;&amp; \\ go build -o main main.goFROM alpine:latestWORKDIR /appCOPY --from=build /app/main /app/mainRUN ls -lah /appEXPOSE 9000CMD [&quot;/app/main&quot;] 2. 选择codeup的流水线，并且建立注意填写构建标签${DATETIME} 源码类型：自定义镜像镜像地址 填写上面的docker 仓库地址， 注意填写完整地址和版本 :${DATETIME} 例如. https://xxx.com/xx/xx:`${DATETIME}` 运行，发现云函数也更新了","link":"/2022/10/25/2022-10-25%E4%BD%BF%E7%94%A8codeup%E4%BA%91%E6%95%88%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2%E5%88%B0%E4%BA%91%E5%87%BD%E6%95%B0/"},{"title":"golang的printf","text":"sprintf 格式https://www.runoob.com/go/go-fmt-sprintf.html 12345678910111213%v 按值的本来值输出%+v 在 %v 基础上，对结构体字段名和值进行展开%#v 输出 Go 语言语法格式的值%T 输出 Go 语言语法格式的类型和值%% 输出 % 本体%b 整型以二进制方式显示%o 整型以八进制方式显示%d 整型以十进制方式显示%x 整型以十六进制方式显示%X 整型以十六进制、字母大写方式显示%U Unicode 字符%f 浮点数%p 指针，十六进制方式显示","link":"/2022/11/01/2022-11-01golang%E7%9A%84printf/"},{"title":"windows无法启动docker WSL丢失无法启动","text":"windows使用 管理员 权限 打开CMD执行命令 1netsh winsock reset 重启 done","link":"/2022/11/01/2022-11-01windows%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8docker-WSL%E4%B8%A2%E5%A4%B1%E6%97%A0%E6%B3%95%E5%90%AF%E5%8A%A8/"},{"title":"ESP-01sPlatformio无法烧录程序","text":"修改 platformio.ini123456[env:esp01_1m]platform = espressif8266board = esp01_1mframework = arduinoupload_resetmethod = nodemcu #追加这行","link":"/2022/11/03/2022-11-03ESP-01sPlatformio%E6%97%A0%E6%B3%95%E7%83%A7%E5%BD%95%E7%A8%8B%E5%BA%8F/"},{"title":"ESP8266传感器集合arduino-5516光敏感电阻","text":"传感器用法和集合 模拟元件 【5516光敏电阻模块】（ADC）核心代码 123456789101112131415#include &lt;Arduino.h&gt;const int AdcPin = A0;void setup() {// write your initialization code here Serial.begin(115200);}void loop() {// write your code here int adc = analogRead(AdcPin); Serial.print(&quot;value=&quot;); Serial.println(adc); delay(1000);}","link":"/2022/11/06/2022-11-06ESP8266%E4%BC%A0%E6%84%9F%E5%99%A8%E9%9B%86%E5%90%88arduino-5516%E5%85%89%E6%95%8F%E6%84%9F%E7%94%B5%E9%98%BB/"},{"title":"ESP8266传感器集合arduino-GY-BMP280-3.3高精度大气压强传感器模块","text":"效果图 应该是国产盗版，正版应该是https://www.adafruit.com/product/2652 1234567891011121314151617181920212223242526272829303132333435363738394041#include &lt;Arduino.h&gt;#include &lt;Wire.h&gt;#include &lt;SPI.h&gt;#include &lt;Adafruit_Sensor.h&gt;#include &quot;Adafruit_BMP280.h&quot; //#这个东西找卖家要，或者文章地步下载Adafruit_BMP280 bme; // I2Cvoid setup() {// write your initialization code here Serial.begin(115200); unsigned status; status = bme.begin(); if (!status) { Serial.println(&quot;Could not find a valid BMP280 sensor, check wiring!&quot;); while (1) delay(10); }}void loop() { Serial.print(&quot;温度 = &quot;); Serial.print(bme.readTemperature()); Serial.println(&quot; C&quot;); Serial.print(&quot;气压 = &quot;); Serial.print(bme.readPressure()); Serial.println(&quot; Pa&quot;); // Serial.print(&quot;Approx altitude = &quot;); // Serial.print(bme.readAltitude(1013.25)); // this should be adjusted to your local forcase // Serial.println(&quot; m&quot;); Serial.println(); delay(2000);} GY-BMP280-3.3 高精度大气压强传感器模块 高度计传感器模块大气.zip","link":"/2022/11/06/2022-11-06ESP8266%E4%BC%A0%E6%84%9F%E5%99%A8%E9%9B%86%E5%90%88arduino-GY-BMP280-3-3%E9%AB%98%E7%B2%BE%E5%BA%A6%E5%A4%A7%E6%B0%94%E5%8E%8B%E5%BC%BA%E4%BC%A0%E6%84%9F%E5%99%A8%E6%A8%A1%E5%9D%97/"},{"title":"gitea从windows搬迁到linuxdocker","text":"之前在windows上图方便使用 gitea，现在要搬迁到 linux下的docker部署中 模块1.0 搭建Gitea1:把windows的目录下3个文件夹搬迁custom和data 和log 搬迁到 linux下 /home/gitea/ 2:修改 custom/conf/app.ini 的路径和其他参数3. 申请 ssl证书，改为 ssl.crt (原来可能是xxxx.pem) 和 ssl.key 放入 /home/gitea/ssl/12345678910111213141516171819202122232425RUN_USER = git[database]PATH =/data/gitea/gitea.db[repository]ROOT = /data/gitea/gitea-repositories[server]SSH_DOMAIN = 42.192服务器IPDOMAIN = 42.192服务器IPPROTOCOL = httpsCERT_FILE = /data/gitea/ssl/ssl.crtKEY_FILE =/data/gitea/ssl/ssl.keyHTTP_PORT = 3000ROOT_URL =https://改为你的最终的域名和端口(前端用的,端口不是3000，而是docker决定的)[lfs]PATH = /data/gitea/lfs[log]ROOT_PATH = /data/gitea/log 3. docker 启动123456789101112131415161718docker kill giteadocker rm giteamkdir -p /home/git/.sshdocker run -it \\--name=gitea \\-p80:3000 \\-p127.0.0.1:2222:22 \\-e USER_UID=1001 \\-e USER_GID=1000 \\-v `pwd`/public:/data/gitea/public \\-v `pwd`/templates:/data/gitea/templates \\-v `pwd`/data:/data/gitea \\-v `pwd`/log:/data/gitea/log \\-v `pwd`/custom/conf/app.ini:/data/gitea/conf/app.ini \\-v /home/git/.ssh/:/data/git/.ssh \\gitea/gitea:latest 其他问题0. 不使用账号密码，如何开启SSH clone请在本博客搜： 1. 我原来上传的 用户头像和组织头像不能显示了，因为官方 docker镜像 的gitea的默认配置和windows下的默认不同，需要具体指定，修改 custom/conf/app.ini 123456[picture]DISABLE_GRAVATAR = trueENABLE_FEDERATED_AVATAR = falseAVATAR_STORAGE_TYPE = localAVATAR_UPLOAD_PATH = /data/gitea/avatarsREPOSITORY_AVATAR_STORAGE_TYPE = local 然后 重启docker 1docker restart gitea 额外-模板自定义模板: 在container软件包界面，增加FROM用法 修改home界面 登陆后顶部多了软件包,仓库 导航栏 templates.zip","link":"/2022/11/15/2022-11-15gitea%E4%BB%8Ewindows%E6%90%AC%E8%BF%81%E5%88%B0linuxdocker/"},{"title":"gitea使用docker开启sshClone giteaSshPermissionDenied-publickey.","text":"经常看到gitea 关于ssh配置的问题Permission denied (publickey). 下面开始手把手的教程 0. 原理原理 1234567891011client(你 ssh cLone ) -&gt; Linux:22 (宿主机:22) 使用git账号（宿主机/home/git/.ssh/authorized_keys） -&gt;配置搭建转发 /usr/local/bin/gitea -&gt;ssh (宿主机) 连接 127.0.0.1:2222(docker容器的22端口映射) -&gt; 携带类似nginx转发的数据到 容器:2222 进行git 操作 1. 搭建服务器 ssh隧道转发1.1 添加git用户作为ssh专用的用户123mkdir /home/gituseradd git 1.2 生成git用户的rsa ssh登录密钥对一定要加sudo -u 不然是生成root用户的密钥对。或者你su git 切换用户生成先，记得切回ROOT chown git:git /home/git 12345## 一路按回车就好了，千万不要输入 parsePasswd ，不然你每次git clone都要输入这个密码sudo -u git ssh-keygen -t rsa -b 4096 -C &quot;Gitea Host Key&quot;chown git:git /home/git 1.3 修改.ssh 特殊权限，错误设置无法ssh登录!123chmod 755 /home/gitchmod 700 /home/git/.sshchmod 600 /home/git/.ssh/authorized_keys 1.4 宿主机开启 RSA证书登录12345vim /etc/ssh/sshd_conf#将PubkeyAuthentication yes前边的#去掉。这样证书登录就开启了。#重启SSH服务systemctl restart sshd 2. 搭建服务器 docker启动2.1 查看git用户的 GUID和UID ，我这里是 1001 每个人不一样12ids git## uid=1001(git) gid=1001(git) groups=1001(git) 2.1 编写gitea.sh 使用git用户启动,修改下面的-e USER_UID=和-e USER_GID= 为上面的数值vim gitea.sh 内容为 12345678910111213141516docker kill giteadocker rm giteamkdir -p /home/git/.sshdocker run -it \\--name=gitea \\-p80:3000 \\-p127.0.0.1:2222:22 \\-e USER_UID=1001 \\-e USER_GID=1000 \\-v `pwd`/public:/data/gitea/public \\-v `pwd`/templates:/data/gitea/templates \\-v `pwd`/data:/data/gitea \\-v `pwd`/log:/data/gitea/log \\-v `pwd`/custom/conf/app.ini:/data/gitea/conf/app.ini \\-v /home/git/.ssh/:/data/git/.ssh \\gitea/gitea:latest 2.2 配置 22:-&gt;2222 ssh转发带来vi /usr/local/bin/gitea 保存以下的脚本 1ssh -p 2222 -o StrictHostKeyChecking=no git@127.0.0.1 &quot;SSH_ORIGINAL_COMMAND=\\&quot;$SSH_ORIGINAL_COMMAND\\&quot; $0 $@&quot; 1chmod -R 777 /usr/local/bin/gitea 3. 你的电脑 配置3.1 生成密钥对打开git CMD 12## 一路按回车就好了，千万不要输入 parsePasswd ，不然你每次git clone都要输入这个密码ssh-keygen -t rsa -b 4096 -C &quot;Gitea Host Key&quot; 把id_rsa.pub 内容 复制到 你的gitea网站上 xxx.com/user/settings/keys windows C:\\Users\\admin\\.ssh\\id_rsa.pub linux ~/.ssh/id_rsa.pub","link":"/2022/11/19/2022-11-19gitea%E4%BD%BF%E7%94%A8docker%E5%BC%80%E5%90%AFsshClone-giteaSshPermissionDenied-publickey/"},{"title":"golang设计模式","text":"快收藏！最全GO语言实现设计模式.pdf 下载-最全GO语言实现设计模式.pdf !!! !!!","link":"/2022/11/24/2022-11-24golang%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"},{"title":"阿里云DDNS如何只对某个域名进行授权子账号呢","text":"目前我使用ddns -docker由于主账号accessKey权限太大，子账号权限也大，目前限制子账号只能对 目标某个域名进行授权，读写改 域名解析 https://github.com/jeessy2/ddns-go 171067*****758 是你的阿里主账号的ID，在个人详情页面中获取 123456789101112131415161718192021{ &quot;Version&quot;: &quot;1&quot;, &quot;Statement&quot;: [ { &quot;Effect&quot;: &quot;Allow&quot;, &quot;Action&quot;: [ &quot;alidns:AddDomainRecord&quot;, &quot;alidns:UpdateDomainRecord&quot;, &quot;alidns:DeleteSubDomainRecords&quot;, &quot;alidns:DeleteDomainRecord&quot;, &quot;alidns:DescribeSubDomainRecords&quot;, &quot;alidns:DescribeDomainRecords&quot;, &quot;alidns:DescribeDomainRecordInfo&quot; ], &quot;Resource&quot;: [ &quot;acs:alidns:*:171067*****7582:domain/baidu.com&quot; ], &quot;Condition&quot;: {} } ]}","link":"/2022/11/29/2022-11-29%E9%98%BF%E9%87%8C%E4%BA%91DDNS%E5%A6%82%E4%BD%95%E5%8F%AA%E5%AF%B9%E6%9F%90%E4%B8%AA%E5%9F%9F%E5%90%8D%E8%BF%9B%E8%A1%8C%E6%8E%88%E6%9D%83%E5%AD%90%E8%B4%A6%E5%8F%B7%E5%91%A2/"},{"title":"使用frp搭建p2p远程桌面","text":"不通过frp转发，第一次使用frps进行桥梁搭建，后面就是p2p流量了， nat类型一共有nat1-nat4(最差)，双方网络需要 client1+clinet2&lt; 7 才行。对称网络+端口限制网络 已经不能打通p2p了 0: 准备 frp软件包 ， net网络类型检测 frp软件包https://github.com/fatedier/frp/releases 网络类型检测https://github.com/HMBSbige/NatTypeTester/releases 我是移动内网ip，但是类型是nat1，高恪路由器只支持nat4!!!nat类型一共有nat1-nat4(最差)，双方网络需要 client1+clinet2&lt; 7 才行。对称网络+端口限制网络 已经不能打通p2p了nat类型一共有nat1-nat4(最差)，双方网络需要 client1+clinet2&lt; 7 才行。对称网络+端口限制网络 已经不能打通p2p了nat类型一共有nat1-nat4(最差)，双方网络需要 client1+clinet2&lt; 7 才行。对称网络+端口限制网络 已经不能打通p2p了 1：被控端 配置1234567891011121314[common]server_addr = xxxxx.comserver_port = 7000token = ******** [p2p_rdp_xtcp]type = xtcpsk = 272745local_ip = 127.0.0.1local_port = 3389use_encryption = falseuse_compression = false 2: 控制端，本地端口转发到 p2p远程33891234567891011121314151617[common]server_addr = ****.comserver_port = 7000token = ***** [p2p_rdp_visitor]role = visitortype = xtcpserver_name = p2p_rdp_xtcpsk = 272745bind_addr = 127.0.0.1bind_port = 10001use_encryption = falseuse_compression = false 3. 远程连接后，关闭frps ，仍然可以没问题。","link":"/2022/12/01/2022-12-01%E4%BD%BF%E7%94%A8frp%E6%90%AD%E5%BB%BAp2p%E8%BF%9C%E7%A8%8B%E6%A1%8C%E9%9D%A2/"},{"title":"golang的features","text":"make 特性 返回的时候一个指针地址，且内容为nil 只有 chan和map才需要用到 可以预先设置容量 chan设计模式会造成deadlock的情况1:在阻塞channel中阻塞写入前无监听读取 123ch1 := make(chan bool)defer close(ch1)ch1 &lt;- true //all goroutines are asleep - deadlock! 2: 不会造成死锁 1234567go func() { time2.Sleep(time2.Second * 10) for true { &lt;-ch1 }}()ch1 &lt;- true slice切片 定义不需要设置长度 make的初始化为 nil [1,3] 取数学表达式[1,3} appand() 追加","link":"/2023/02/07/2023-02-07golang%E7%9A%84features/"},{"title":"docker管理面板Portainer","text":"HTTPS 1docker run -d --name portainer --restart=always -p 9443:9443 -v /var/run/docker.sock:/var/run/docker.sock -v `pwd`:/data portainer/portainer-ce:latest --ssl true --sslcert=/data/ssl.crt --sslkey=/data/ssl.key","link":"/2023/02/27/2023-02-27docker%E7%AE%A1%E7%90%86%E9%9D%A2%E6%9D%BFPortainer/"},{"title":"Linux内存不足go编译出现signal1return","text":"1234dd if=/dev/zero of=/swapfile bs=1M count=2048chmod 600 /swapfileswapon /swapfile/swapfile swap swap defaults 0 0","link":"/2023/05/23/2023-05-23Linux%E5%86%85%E5%AD%98%E4%B8%8D%E8%B6%B3go%E7%BC%96%E8%AF%91%E5%87%BA%E7%8E%B0signal1return/"},{"title":"搭建code-server","text":"搭建网页版的vscode 1rm -rf /home/codeserver 1ssh-keygen -t rsa -b 4096 -C &quot;vscode&quot; golang环境1234567wget https://go.dev/dl/go1.20.4.linux-amd64.tar.gzcurl -O https://go.dev/dl/go1.20.4.linux-amd64.tar.gztar -C /usr/local -xzf go1.20.4.linux-amd64.tar.gz export PATH=$PATH:/usr/local/go/binsource /etc/profile 123456789101112131415161718192021docker kill code-serverdocker rm code-serverdocker run -d \\--name=code-server \\-e TZ=Etc/UTC \\-e PUID=0 \\-e PGID=0 \\-e PASSWORD=272745 \\-e SUDO_PASSWORD=272745 \\-e DEFAULT_WORKSPACE=/home/codeserver/workspace \\-e HOME=/home/codeserver/ \\-p 8443:8443 \\-v /home/codeserver/workspace:/home/codeserver/workspace \\-v /home/codeserver/config:/config \\-v /var/run/docker.sock:/var/run/docker.sock \\-v /usr/bin/docker:/usr/bin/docker \\--restart unless-stopped \\ lscr.io/linuxserver/code-server:latest","link":"/2023/05/23/2023-05-23%E6%90%AD%E5%BB%BAcode-server/"},{"title":"在web浏览器中使用jetbrains的idea","text":"使用Docker拉取镜像从projectorimages1docker run -it --name golangd -p8887:8887 projectorimages/projector-goland 从sapce拉出1docker run -it --name golangd -p8887:8887 registry.jetbrains.team/p/prj/containers/projector-goland","link":"/2023/07/16/2023-07-16%E5%9C%A8web%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%AD%E4%BD%BF%E7%94%A8jetbrains%E7%9A%84idea/"},{"title":"如何使用阿里云FC的JWT网关统一拦截","text":"使用golang签发JWT0x01 生成RSA密钥对 https://mkjwk.org/? 12345678910111213141516{ &quot;keys&quot;: [ { &quot;p&quot;: &quot;7Ks-LNbE4bhnec54YSgnlngwwIm3dOg3oiHvvkJ0yrEt5oir30bvQo_NjJm94Wz35T3zvnCdr8H5dpV88MWoRIe-PhJ0HWA05giDR0G3bD5GkFqtq31hOp_2AOt_nbWSDZPeoS5GwyATAOS4rKSh1ZDbURrgXGn8WKNNcvjBW18&quot;, &quot;kty&quot;: &quot;RSA&quot;, &quot;q&quot;: &quot;paMmlRdEJF0FPTCDl3u-E6c2bnGJ8Api2zty39P1oq6PYzea3TpDb61qj53auaPh_whHAlOGAhpHXWzZ2aLcwI0f80R-2DPJX6FRbIZ9vk5dR3tSaSTLG8n-Dyj7t7A6S0tFT48dshmw3NiPiRrDZPD1qOw6ckY-e0JqbyM2N7k&quot;, &quot;d&quot;: &quot;W86oODM7BiizrzKUKlL5RQv2zD_EiA86O8uQ1SvXLmBaoBmO6w9QNgGdT8azfCLEmTN5Hs1vFF7fJWaFp2cB18xKtOgCRjiuYJiN2A4FWmtpi390GgkYKvvTxoUDb3J_Eb4nikxp7mGvFKaDhX4NQ52pTGLwYgeLi2IIqYLHpaMqck2vdP1SahKsm81e0rZ8hYSi5VJsfpUnOm6Nxb277kPAh019cV3AaWLyMnFLSowOIiIZLNA4K3aetA5BpQnhxAzGiAI1f1ERfK2asLxQcYE_fabMzBz45od_yYNjmEauQgl8Wy42UWUZdwfU8512qwr_7dyM4M1ce6cWwl1hwQ&quot;, &quot;e&quot;: &quot;AQAB&quot;, &quot;qi&quot;: &quot;xgtaScAqZ8DEKSCfHDecDo3KLxsa5JbWBUzevu55o9zbqol8C0p_QUCSlxyTIAA5e6vcPXXutToH7_DqPBHpO-xozNTV1Z7Hhmmq2OQIpiaTf76uCmLam6ARSdIuE0JrYEAOxo0cMXaikO2NA_4LDV6BQlnh4Jt3kua2YoQVFdY&quot;, &quot;dp&quot;: &quot;pCuBfK8acY1uUgNUY-jr1SfYgabGWNVAyjoKSQtmYrgXJASIXOCi1aRVLIP1QGtLZnzcGK2b5LCEsKqvuYES4T7cS8iXPU1gRHWBQyul5fMpFbehIwVdLcKKbkbuBmNORhbd5ybntTEJnaQLKs8k57WNPSyMl-55Oq9E6Uz_K7c&quot;, &quot;alg&quot;: &quot;RS256&quot;, &quot;dq&quot;: &quot;ka0PFtsSlES3gdx0L7umLZTHu5Th8xq_XP9JBfBePgj2lRVnf6BphQPpD4yOvOyUq_90rGgXGSxRjapZYx7otfSooASi5rWNKy0u9prGZqR3R5H_pfe1JqidaGnsEN7ONkBqIhHF1UjhEyrn-nZuWQ3PkRTKRozfEPsVrs8yNQk&quot;, &quot;n&quot;: &quot;mSEzxr1h3oJsNK9CC5DLOd01CT4Ol9uHdc8I8Z5ZxP6FYnXybRS9crUlxZjENTSstTsLP0se8k3yNyFnhyh7NcCVSW6tS8eHcuWxqesvq0Dxyhyc2LUWkdAXXb9heOKD2HkWznu24-dHAZL18L0Dr31cWTWWRpLQP62RhfOM3S43DJb2ifcJn8Pa7LO_GPJnTTNFquQbVMLRfOepZmuwZ1I4cLLD5gzJ5azWBGHjaTHTsAOGTbndxYUYxreROaiImW6kJQvo5WzoUsES8nJQTEeXt89qANAxAz-af4KV-a9OKkX99QzMKd0qDDQ_NEvIE0Z0SW8OKAxRE4f_kWZwpw&quot; } ]} 0x02 golang生成jwt 这里使用embed加载了jwtkey的文件，文件内容就是 12345{&quot;alg&quot;: &quot;RS256&quot;,....} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105package mainimport ( &quot;crypto/rsa&quot; _ &quot;embed&quot; &quot;encoding/base64&quot; &quot;encoding/json&quot; &quot;fmt&quot; &quot;math/big&quot; &quot;time&quot; &quot;github.com/dgrijalva/jwt-go&quot;)type PublicKey struct { Kty string `json:&quot;kty&quot;` E string `json:&quot;e&quot;` N string `json:&quot;n&quot;`}type PrivateKey struct { PublicKey D string `json:&quot;d&quot;` Qi string `json:&quot;qi&quot;` Q string `json:&quot;q&quot;` Dp string `json:&quot;dp&quot;` Dq string `json:&quot;dq&quot;`}//go:embed jwt.keyvar keyJSON stringfunc genJwt() { // 解析密钥JSON var privateKey PrivateKey err := json.Unmarshal([]byte(keyJSON), &amp;privateKey) if err != nil { fmt.Printf(&quot;Failed to parse key JSON: %v\\n&quot;, err) return } // 解码Base64编码的密钥 nBytes, err := base64.RawURLEncoding.DecodeString(privateKey.N) if err != nil { fmt.Printf(&quot;Failed to decode modulus: %v\\n&quot;, err) return } dBytes, err := base64.RawURLEncoding.DecodeString(privateKey.D) if err != nil { fmt.Printf(&quot;Failed to decode private exponent: %v\\n&quot;, err) return } eBytes, err := base64.RawURLEncoding.DecodeString(privateKey.E) if err != nil { fmt.Printf(&quot;Failed to decode public exponent: %v\\n&quot;, err) return } // 构建RSA私钥 rsaPrivateKey := &amp;rsa.PrivateKey{ PublicKey: rsa.PublicKey{ N: rsaDecode(nBytes), E: int(extractBigEndianValue(eBytes)), }, D: rsaDecode(dBytes), Primes: []*big.Int{ rsaDecode([]byte(privateKey.Q)), }, Precomputed: rsa.PrecomputedValues{}, } // 创建JWT声明 claims := jwt.StandardClaims{ Subject: &quot;user123&quot;, ExpiresAt: time.Now().Add(time.Minute * 10).Unix(), } // 签发JWT令牌 token := jwt.NewWithClaims(jwt.SigningMethodRS256, claims) signedToken, err := token.SignedString(rsaPrivateKey) if err != nil { fmt.Printf(&quot;Failed to sign token: %v\\n&quot;, err) return } fmt.Println(signedToken)}// 辅助函数：将字节数据转换为big.Int类型func rsaDecode(data []byte) *big.Int { var result big.Int result.SetBytes(data) return &amp;result}// 辅助函数：从字节切片中提取大端值func extractBigEndianValue(data []byte) uint64 { value := uint64(0) for _, b := range data { value = (value &lt;&lt; 8) + uint64(b) } return value} 计算得到jwt， 设置阿里云FC的JWT认证拦截","link":"/2023/07/29/2023-07-29%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8%E9%98%BF%E9%87%8C%E4%BA%91FC%E7%9A%84JWT%E7%BD%91%E5%85%B3%E7%BB%9F%E4%B8%80%E6%8B%A6%E6%88%AA/"},{"title":"在docker中安装transmission且在windows","text":"docker-compose.yaml 文件 12345678910111213141516171819202122232425version: &quot;2.1&quot;services: transmission: image: linuxserver/transmission:latest container_name: transmission environment: - PUID=1000 - PGID=1000 - TZ=Etc/UTC - USER = admin - PASS = password - TRANSMISSION_WEB_HOME = /usr/share/transmission/public_html # #- WHITELIST= #optional #- PEERPORT= #optional #- HOST_WHITELIST= #optional volumes: - E:\\docker\\transmission\\src:/usr/share/transmission/public_html/ - /E:\\docker\\transmission\\config/:/config - E:\\docker\\transmission\\downloads/:/downloads - E:\\docker\\transmission\\watch/:/watch ports: - 9091:9091 - 51413:51413 - 51413:51413/udp restart: always 下载美化包美化包","link":"/2023/08/14/2023-08-14%E5%9C%A8docker%E4%B8%AD%E5%AE%89%E8%A3%85transmission%E4%B8%94%E5%9C%A8windows/"},{"title":"2023-08-24在hexo中的技巧","text":"一些Hexo的入门技巧和本站主题一些经验 主题篇1. 本地化搭建修改文件 _config.icarus.yml 1234providers: cdn: '/assets/cdn/${filename}' fontcdn: '/assets/fontcdn/${type}?family=${fontname}' iconcdn: '/assets/iconcdn/all.css' assets.zip 将静态资源放入/source/assets 没有就新建assets 写文章技巧1. 增加资源文件连接注意： 禁止在 &lt;!--more--&gt; 之前 展示 下载按钮，会404 要开启 文章资源文件夹 请设置 config.yml 1post_asset_folder:true 使用案例 12[下载按钮名称][1][1]: ./文章资源文件夹/文件名.zip 图片使用案例 12![接入][1][1]: img.png","link":"/2020/08/24/2023-08-24%E5%9C%A8hexo%E4%B8%AD%E7%9A%84%E6%8A%80%E5%B7%A7/"},{"title":"cprs","text":"vultr.com 2.5美元/月付 服务器 10 earned for every new unique paid userhttps://www.vultr.com/?ref=7235784 Give $100, Get $35Please note! This code will be available for a limited time!https://www.vultr.com/?ref=9009842-8H 又拍云CDN又拍云推出的开发者帮助计划为开发者提供专业、免费、稳定的 CDN 及云存储服务，加速个人网站及 APP 等项目又拍云联盟用户每月独享优惠加入又拍云联盟，按步骤完成申请即可获得10GB免费存储空间15GB免费 CDN 流量(HTTP/HTTPS 均可用) https://console.upyun.com/register/?invite=HkOQGmaMb ##【腾讯云】推广者专属福利，新客户无门槛领取总价值高达2860元代金券，每种代金券限量500张，先到先得。https://cloud.tencent.com/act/cps/redirect?redirect=1040&amp;cps_key=5b278124dc57cb0b36c794801f2aa26b&amp;from=console短链接：https://curl.qcloud.com/gB778orb 阿里云新人福利会场新用户福利享不停，精心挑选的热门云产品优惠持续https://www.aliyun.com/1111/new?userCode=7sbmbaqxECS产品限时奖励ECS新客户产品推广4000元及以上即可额外奖励300元上云必备特惠机型，限时火热大促中 https://www.aliyun.com/minisite/goods?taskCode=pintuan20201212&amp;recordId=null&amp;userCode=7sbmbaqx","link":"/2023/07/07/cprs/"}],"tags":[{"name":"机器人","slug":"机器人","link":"/tags/%E6%9C%BA%E5%99%A8%E4%BA%BA/"},{"name":"SCF","slug":"SCF","link":"/tags/SCF/"},{"name":"Serverless","slug":"Serverless","link":"/tags/Serverless/"},{"name":"qq","slug":"qq","link":"/tags/qq/"},{"name":"avatar","slug":"avatar","link":"/tags/avatar/"},{"name":"FC","slug":"FC","link":"/tags/FC/"},{"name":"王者","slug":"王者","link":"/tags/%E7%8E%8B%E8%80%85/"},{"name":"AlpineLinux","slug":"AlpineLinux","link":"/tags/AlpineLinux/"},{"name":"PHP","slug":"PHP","link":"/tags/PHP/"},{"name":"Dockerfile","slug":"Dockerfile","link":"/tags/Dockerfile/"},{"name":"macOS","slug":"macOS","link":"/tags/macOS/"},{"name":"Golang","slug":"Golang","link":"/tags/Golang/"},{"name":"无线电","slug":"无线电","link":"/tags/%E6%97%A0%E7%BA%BF%E7%94%B5/"},{"name":"暗区突围","slug":"暗区突围","link":"/tags/%E6%9A%97%E5%8C%BA%E7%AA%81%E5%9B%B4/"},{"name":"FRP","slug":"FRP","link":"/tags/FRP/"},{"name":"kangle","slug":"kangle","link":"/tags/kangle/"},{"name":"经验","slug":"经验","link":"/tags/%E7%BB%8F%E9%AA%8C/"},{"name":"Docker","slug":"Docker","link":"/tags/Docker/"},{"name":"Redis","slug":"Redis","link":"/tags/Redis/"},{"name":"redis","slug":"redis","link":"/tags/redis/"},{"name":"rabbitMQ","slug":"rabbitMQ","link":"/tags/rabbitMQ/"},{"name":"ci&#x2F;cd","slug":"ci-cd","link":"/tags/ci-cd/"},{"name":"esp8266","slug":"esp8266","link":"/tags/esp8266/"},{"name":"gitea","slug":"gitea","link":"/tags/gitea/"},{"name":"阿里云","slug":"阿里云","link":"/tags/%E9%98%BF%E9%87%8C%E4%BA%91/"},{"name":"P2P","slug":"P2P","link":"/tags/P2P/"},{"name":"CodeServer","slug":"CodeServer","link":"/tags/CodeServer/"},{"name":"docker","slug":"docker","link":"/tags/docker/"},{"name":"cprs","slug":"cprs","link":"/tags/cprs/"}],"categories":[{"name":"默认","slug":"默认","link":"/categories/%E9%BB%98%E8%AE%A4/"},{"name":"教程","slug":"教程","link":"/categories/%E6%95%99%E7%A8%8B/"},{"name":"Linux","slug":"Linux","link":"/categories/Linux/"},{"name":"Serverless","slug":"Serverless","link":"/categories/Serverless/"},{"name":"物联网","slug":"物联网","link":"/categories/%E7%89%A9%E8%81%94%E7%BD%91/"},{"name":"设计模式","slug":"设计模式","link":"/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"}],"pages":[{"title":"about","text":"关于我是谁双枪会给出答案 Contact Mehicnvip@icloud.com","link":"/about/index.html"},{"title":"","text":"123 申请链接 如需要申请建立链接： 1：必须为 https 2：请悬挂本站友联 3：下方留言，或者本站 关于我 使用邮件 2023 链接 LCHNAN - 目标是激励他人，感动他人，创造出值得付出时间的东西https://blog.lchnan.cn/ 2019 链接 梦幻辰风 - 壹个永恒的部落格https://www.mhcf.net/","link":"/link/index.html"}]}